== Physical Plan ==
* Sort (39)
+- Exchange (38)
   +- * Project (37)
      +- * SortMergeJoin Inner (36)
         :- * Sort (24)
         :  +- * Project (23)
         :     +- * BroadcastHashJoin Inner BuildRight (22)
         :        :- * HashAggregate (16)
         :        :  +- Exchange (15)
         :        :     +- * HashAggregate (14)
         :        :        +- * Project (13)
         :        :           +- * BroadcastHashJoin Inner BuildRight (12)
         :        :              :- Union (7)
         :        :              :  :- * Project (3)
         :        :              :  :  +- * ColumnarToRow (2)
         :        :              :  :     +- Scan orc tpcds_bin_partitioned_decimal_orc_2.web_sales (1)
         :        :              :  +- * Project (6)
         :        :              :     +- * ColumnarToRow (5)
         :        :              :        +- Scan orc tpcds_bin_partitioned_decimal_orc_2.catalog_sales (4)
         :        :              +- BroadcastExchange (11)
         :        :                 +- * Filter (10)
         :        :                    +- * ColumnarToRow (9)
         :        :                       +- Scan orc tpcds_bin_partitioned_decimal_orc_2.date_dim (8)
         :        +- BroadcastExchange (21)
         :           +- * Project (20)
         :              +- * Filter (19)
         :                 +- * ColumnarToRow (18)
         :                    +- Scan orc tpcds_bin_partitioned_decimal_orc_2.date_dim (17)
         +- * Sort (35)
            +- Exchange (34)
               +- * Project (33)
                  +- * BroadcastHashJoin Inner BuildRight (32)
                     :- * HashAggregate (26)
                     :  +- ReusedExchange (25)
                     +- BroadcastExchange (31)
                        +- * Project (30)
                           +- * Filter (29)
                              +- * ColumnarToRow (28)
                                 +- Scan orc tpcds_bin_partitioned_decimal_orc_2.date_dim (27)


(1) Scan orc tpcds_bin_partitioned_decimal_orc_2.web_sales
Output [2]: [ws_ext_sales_price#49, ws_sold_date_sk#60L]
Batched: true
Location: InMemoryFileIndex [hdfs://server1:9000/user/hive/warehouse/tpcds_bin_partitioned_decimal_orc_2.db/web_sales/ws_sold_date_sk=2450816, ... 1822 entries]
PartitionFilters: [isnotnull(ws_sold_date_sk#60L)]
ReadSchema: struct<ws_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [2]: [ws_ext_sales_price#49, ws_sold_date_sk#60L]

(3) Project [codegen id : 1]
Output [2]: [ws_sold_date_sk#60L AS sold_date_sk#16L, ws_ext_sales_price#49 AS sales_price#17]
Input [2]: [ws_ext_sales_price#49, ws_sold_date_sk#60L]

(4) Scan orc tpcds_bin_partitioned_decimal_orc_2.catalog_sales
Output [2]: [cs_ext_sales_price#83, cs_sold_date_sk#94L]
Batched: true
Location: InMemoryFileIndex [hdfs://server1:9000/user/hive/warehouse/tpcds_bin_partitioned_decimal_orc_2.db/catalog_sales/cs_sold_date_sk=2450815, ... 1838 entries]
PartitionFilters: [isnotnull(cs_sold_date_sk#94L)]
ReadSchema: struct<cs_ext_sales_price:decimal(7,2)>

(5) ColumnarToRow [codegen id : 2]
Input [2]: [cs_ext_sales_price#83, cs_sold_date_sk#94L]

(6) Project [codegen id : 2]
Output [2]: [cs_sold_date_sk#94L AS sold_date_sk#18L, cs_ext_sales_price#83 AS sales_price#19]
Input [2]: [cs_ext_sales_price#83, cs_sold_date_sk#94L]

(7) Union

(8) Scan orc tpcds_bin_partitioned_decimal_orc_2.date_dim
Output [3]: [d_date_sk#95L, d_week_seq#99, d_day_name#109]
Batched: true
Location: InMemoryFileIndex [hdfs://server1:9000/user/hive/warehouse/tpcds_bin_partitioned_decimal_orc_2.db/date_dim]
PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)]
ReadSchema: struct<d_date_sk:bigint,d_week_seq:int,d_day_name:string>

(9) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#95L, d_week_seq#99, d_day_name#109]

(10) Filter [codegen id : 3]
Input [3]: [d_date_sk#95L, d_week_seq#99, d_day_name#109]
Condition : (isnotnull(d_date_sk#95L) AND isnotnull(d_week_seq#99))

(11) BroadcastExchange
Input [3]: [d_date_sk#95L, d_week_seq#99, d_day_name#109]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [id=#227]

(12) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [sold_date_sk#16L]
Right keys [1]: [d_date_sk#95L]
Join condition: None

(13) Project [codegen id : 4]
Output [3]: [sales_price#17, d_week_seq#99, d_day_name#109]
Input [5]: [sold_date_sk#16L, sales_price#17, d_date_sk#95L, d_week_seq#99, d_day_name#109]

(14) HashAggregate [codegen id : 4]
Input [3]: [sales_price#17, d_week_seq#99, d_day_name#109]
Keys [1]: [d_week_seq#99]
Functions [7]: [partial_sum(UnscaledValue(CASE WHEN (d_day_name#109 = Sunday) THEN sales_price#17 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#109 = Monday) THEN sales_price#17 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#109 = Tuesday) THEN sales_price#17 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#109 = Wednesday) THEN sales_price#17 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#109 = Thursday) THEN sales_price#17 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#109 = Friday) THEN sales_price#17 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#109 = Saturday) THEN sales_price#17 ELSE null END))]
Aggregate Attributes [7]: [sum#400L, sum#401L, sum#402L, sum#403L, sum#404L, sum#405L, sum#406L]
Results [8]: [d_week_seq#99, sum#407L, sum#408L, sum#409L, sum#410L, sum#411L, sum#412L, sum#413L]

(15) Exchange
Input [8]: [d_week_seq#99, sum#407L, sum#408L, sum#409L, sum#410L, sum#411L, sum#412L, sum#413L]
Arguments: hashpartitioning(d_week_seq#99, 200), ENSURE_REQUIREMENTS, [id=#233]

(16) HashAggregate [codegen id : 6]
Input [8]: [d_week_seq#99, sum#407L, sum#408L, sum#409L, sum#410L, sum#411L, sum#412L, sum#413L]
Keys [1]: [d_week_seq#99]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#109 = Sunday) THEN sales_price#17 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#109 = Monday) THEN sales_price#17 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#109 = Tuesday) THEN sales_price#17 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#109 = Wednesday) THEN sales_price#17 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#109 = Thursday) THEN sales_price#17 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#109 = Friday) THEN sales_price#17 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#109 = Saturday) THEN sales_price#17 ELSE null END))]
Aggregate Attributes [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#109 = Sunday) THEN sales_price#17 ELSE null END))#275L, sum(UnscaledValue(CASE WHEN (d_day_name#109 = Monday) THEN sales_price#17 ELSE null END))#276L, sum(UnscaledValue(CASE WHEN (d_day_name#109 = Tuesday) THEN sales_price#17 ELSE null END))#277L, sum(UnscaledValue(CASE WHEN (d_day_name#109 = Wednesday) THEN sales_price#17 ELSE null END))#278L, sum(UnscaledValue(CASE WHEN (d_day_name#109 = Thursday) THEN sales_price#17 ELSE null END))#279L, sum(UnscaledValue(CASE WHEN (d_day_name#109 = Friday) THEN sales_price#17 ELSE null END))#280L, sum(UnscaledValue(CASE WHEN (d_day_name#109 = Saturday) THEN sales_price#17 ELSE null END))#281L]
Results [8]: [d_week_seq#99, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#109 = Sunday) THEN sales_price#17 ELSE null END))#275L,17,2) AS sun_sales#20, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#109 = Monday) THEN sales_price#17 ELSE null END))#276L,17,2) AS mon_sales#21, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#109 = Tuesday) THEN sales_price#17 ELSE null END))#277L,17,2) AS tue_sales#22, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#109 = Wednesday) THEN sales_price#17 ELSE null END))#278L,17,2) AS wed_sales#23, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#109 = Thursday) THEN sales_price#17 ELSE null END))#279L,17,2) AS thu_sales#24, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#109 = Friday) THEN sales_price#17 ELSE null END))#280L,17,2) AS fri_sales#25, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#109 = Saturday) THEN sales_price#17 ELSE null END))#281L,17,2) AS sat_sales#26]

(17) Scan orc tpcds_bin_partitioned_decimal_orc_2.date_dim
Output [2]: [d_week_seq#127, d_year#129]
Batched: true
Location: InMemoryFileIndex [hdfs://server1:9000/user/hive/warehouse/tpcds_bin_partitioned_decimal_orc_2.db/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_week_seq)]
ReadSchema: struct<d_week_seq:int,d_year:int>

(18) ColumnarToRow [codegen id : 5]
Input [2]: [d_week_seq#127, d_year#129]

(19) Filter [codegen id : 5]
Input [2]: [d_week_seq#127, d_year#129]
Condition : ((isnotnull(d_year#129) AND (d_year#129 = 2001)) AND isnotnull(d_week_seq#127))

(20) Project [codegen id : 5]
Output [1]: [d_week_seq#127]
Input [2]: [d_week_seq#127, d_year#129]

(21) BroadcastExchange
Input [1]: [d_week_seq#127]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#241]

(22) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [d_week_seq#99]
Right keys [1]: [d_week_seq#127]
Join condition: None

(23) Project [codegen id : 6]
Output [8]: [d_week_seq#99 AS d_week_seq1#0, sun_sales#20 AS sun_sales1#1, mon_sales#21 AS mon_sales1#2, tue_sales#22 AS tue_sales1#3, wed_sales#23 AS wed_sales1#4, thu_sales#24 AS thu_sales1#5, fri_sales#25 AS fri_sales1#6, sat_sales#26 AS sat_sales1#7]
Input [9]: [d_week_seq#99, sun_sales#20, mon_sales#21, tue_sales#22, wed_sales#23, thu_sales#24, fri_sales#25, sat_sales#26, d_week_seq#127]

(24) Sort [codegen id : 6]
Input [8]: [d_week_seq1#0, sun_sales1#1, mon_sales1#2, tue_sales1#3, wed_sales1#4, thu_sales1#5, fri_sales1#6, sat_sales1#7]
Arguments: [d_week_seq1#0 ASC NULLS FIRST], false, 0

(25) ReusedExchange [Reuses operator id: 15]
Output [8]: [d_week_seq#223, sum#421L, sum#422L, sum#423L, sum#424L, sum#425L, sum#426L, sum#427L]

(26) HashAggregate [codegen id : 12]
Input [8]: [d_week_seq#223, sum#421L, sum#422L, sum#423L, sum#424L, sum#425L, sum#426L, sum#427L]
Keys [1]: [d_week_seq#223]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#233 = Sunday) THEN sales_price#17 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#233 = Monday) THEN sales_price#17 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#233 = Tuesday) THEN sales_price#17 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#233 = Wednesday) THEN sales_price#17 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#233 = Thursday) THEN sales_price#17 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#233 = Friday) THEN sales_price#17 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#233 = Saturday) THEN sales_price#17 ELSE null END))]
Aggregate Attributes [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#233 = Sunday) THEN sales_price#17 ELSE null END))#282L, sum(UnscaledValue(CASE WHEN (d_day_name#233 = Monday) THEN sales_price#17 ELSE null END))#283L, sum(UnscaledValue(CASE WHEN (d_day_name#233 = Tuesday) THEN sales_price#17 ELSE null END))#284L, sum(UnscaledValue(CASE WHEN (d_day_name#233 = Wednesday) THEN sales_price#17 ELSE null END))#285L, sum(UnscaledValue(CASE WHEN (d_day_name#233 = Thursday) THEN sales_price#17 ELSE null END))#286L, sum(UnscaledValue(CASE WHEN (d_day_name#233 = Friday) THEN sales_price#17 ELSE null END))#287L, sum(UnscaledValue(CASE WHEN (d_day_name#233 = Saturday) THEN sales_price#17 ELSE null END))#288L]
Results [8]: [d_week_seq#223, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#233 = Sunday) THEN sales_price#17 ELSE null END))#282L,17,2) AS sun_sales#20, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#233 = Monday) THEN sales_price#17 ELSE null END))#283L,17,2) AS mon_sales#21, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#233 = Tuesday) THEN sales_price#17 ELSE null END))#284L,17,2) AS tue_sales#22, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#233 = Wednesday) THEN sales_price#17 ELSE null END))#285L,17,2) AS wed_sales#23, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#233 = Thursday) THEN sales_price#17 ELSE null END))#286L,17,2) AS thu_sales#24, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#233 = Friday) THEN sales_price#17 ELSE null END))#287L,17,2) AS fri_sales#25, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#233 = Saturday) THEN sales_price#17 ELSE null END))#288L,17,2) AS sat_sales#26]

(27) Scan orc tpcds_bin_partitioned_decimal_orc_2.date_dim
Output [2]: [d_week_seq#251, d_year#253]
Batched: true
Location: InMemoryFileIndex [hdfs://server1:9000/user/hive/warehouse/tpcds_bin_partitioned_decimal_orc_2.db/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_week_seq)]
ReadSchema: struct<d_week_seq:int,d_year:int>

(28) ColumnarToRow [codegen id : 11]
Input [2]: [d_week_seq#251, d_year#253]

(29) Filter [codegen id : 11]
Input [2]: [d_week_seq#251, d_year#253]
Condition : ((isnotnull(d_year#253) AND (d_year#253 = 2002)) AND isnotnull(d_week_seq#251))

(30) Project [codegen id : 11]
Output [1]: [d_week_seq#251]
Input [2]: [d_week_seq#251, d_year#253]

(31) BroadcastExchange
Input [1]: [d_week_seq#251]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#276]

(32) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [d_week_seq#223]
Right keys [1]: [d_week_seq#251]
Join condition: None

(33) Project [codegen id : 12]
Output [8]: [d_week_seq#223 AS d_week_seq2#8, sun_sales#20 AS sun_sales2#9, mon_sales#21 AS mon_sales2#10, tue_sales#22 AS tue_sales2#11, wed_sales#23 AS wed_sales2#12, thu_sales#24 AS thu_sales2#13, fri_sales#25 AS fri_sales2#14, sat_sales#26 AS sat_sales2#15]
Input [9]: [d_week_seq#223, sun_sales#20, mon_sales#21, tue_sales#22, wed_sales#23, thu_sales#24, fri_sales#25, sat_sales#26, d_week_seq#251]

(34) Exchange
Input [8]: [d_week_seq2#8, sun_sales2#9, mon_sales2#10, tue_sales2#11, wed_sales2#12, thu_sales2#13, fri_sales2#14, sat_sales2#15]
Arguments: hashpartitioning((d_week_seq2#8 - 53), 200), ENSURE_REQUIREMENTS, [id=#386]

(35) Sort [codegen id : 13]
Input [8]: [d_week_seq2#8, sun_sales2#9, mon_sales2#10, tue_sales2#11, wed_sales2#12, thu_sales2#13, fri_sales2#14, sat_sales2#15]
Arguments: [(d_week_seq2#8 - 53) ASC NULLS FIRST], false, 0

(36) SortMergeJoin [codegen id : 14]
Left keys [1]: [d_week_seq1#0]
Right keys [1]: [(d_week_seq2#8 - 53)]
Join condition: None

(37) Project [codegen id : 14]
Output [8]: [d_week_seq1#0, round(CheckOverflow((promote_precision(sun_sales1#1) / promote_precision(sun_sales2#9)), DecimalType(37,20), true), 2) AS round((sun_sales1 / sun_sales2), 2)#289, round(CheckOverflow((promote_precision(mon_sales1#2) / promote_precision(mon_sales2#10)), DecimalType(37,20), true), 2) AS round((mon_sales1 / mon_sales2), 2)#290, round(CheckOverflow((promote_precision(tue_sales1#3) / promote_precision(tue_sales2#11)), DecimalType(37,20), true), 2) AS round((tue_sales1 / tue_sales2), 2)#291, round(CheckOverflow((promote_precision(wed_sales1#4) / promote_precision(wed_sales2#12)), DecimalType(37,20), true), 2) AS round((wed_sales1 / wed_sales2), 2)#292, round(CheckOverflow((promote_precision(thu_sales1#5) / promote_precision(thu_sales2#13)), DecimalType(37,20), true), 2) AS round((thu_sales1 / thu_sales2), 2)#293, round(CheckOverflow((promote_precision(fri_sales1#6) / promote_precision(fri_sales2#14)), DecimalType(37,20), true), 2) AS round((fri_sales1 / fri_sales2), 2)#294, round(CheckOverflow((promote_precision(sat_sales1#7) / promote_precision(sat_sales2#15)), DecimalType(37,20), true), 2) AS round((sat_sales1 / sat_sales2), 2)#295]
Input [16]: [d_week_seq1#0, sun_sales1#1, mon_sales1#2, tue_sales1#3, wed_sales1#4, thu_sales1#5, fri_sales1#6, sat_sales1#7, d_week_seq2#8, sun_sales2#9, mon_sales2#10, tue_sales2#11, wed_sales2#12, thu_sales2#13, fri_sales2#14, sat_sales2#15]

(38) Exchange
Input [8]: [d_week_seq1#0, round((sun_sales1 / sun_sales2), 2)#289, round((mon_sales1 / mon_sales2), 2)#290, round((tue_sales1 / tue_sales2), 2)#291, round((wed_sales1 / wed_sales2), 2)#292, round((thu_sales1 / thu_sales2), 2)#293, round((fri_sales1 / fri_sales2), 2)#294, round((sat_sales1 / sat_sales2), 2)#295]
Arguments: rangepartitioning(d_week_seq1#0 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#394]

(39) Sort [codegen id : 15]
Input [8]: [d_week_seq1#0, round((sun_sales1 / sun_sales2), 2)#289, round((mon_sales1 / mon_sales2), 2)#290, round((tue_sales1 / tue_sales2), 2)#291, round((wed_sales1 / wed_sales2), 2)#292, round((thu_sales1 / thu_sales2), 2)#293, round((fri_sales1 / fri_sales2), 2)#294, round((sat_sales1 / sat_sales2), 2)#295]
Arguments: [d_week_seq1#0 ASC NULLS FIRST], true, 0

